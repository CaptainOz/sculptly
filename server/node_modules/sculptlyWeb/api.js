///
/// # API #
/// API module handles all browser requests for API commands.
///

var m = {
    events : require('events'),
    util   : require('util')
};

/// ## Exported Variables ##
///
/// ### api.RC ###
/// Response codes come in the following flavors loosely based on HTTP codes:
///  - 200 `SUCCESS`         The request was executed successfully.
///  - 400 `UNKNOWN_COMMAND` The requested command is unknown.
///  - 401 `MISSING_PARAM`   The request was missing a required parameter.
///  - 500 `SERVER_ERROR`    The server screwed something up.
var RC = {
    // Success codes
    SUCCESS         : 200,

    // Client error codes
    UNKNOWN_COMMAND : 400,
    MISSING_PARAM   : 401,

    // Server error codes
    SERVER_ERROR    : 500
};
exports.RC = RC;

/// ## Exported Functions ##
///
/// ### api.createCommand ###
/// Creates a new `CommandRequest` object with the given parameters and returns
/// it.
exports.createCommand = function( command, parameters ){
    try{
        // Sanitize the command name then load it and create it
        var cleanCommand = command.replace( /[^\w]/g, '' );
        return require( './commands/' + cleanCommand ).create( parameters );
    }
    catch( e ){
        // Uh-oh, failed to start the command!
        console.log( 'Failed to load "'+command+'": '+e.toString() );
        throw {
            code    : RC.UNKNOWN_COMMAND,
            message : 'Unknown command: ' + command
        };
    }
};

/// ## api.CommandRequest ##
/// Encapsulates an API request and is an `EventEmitter`.
///
/// ### Event: `error` ###
/// `function( errorCode, message ){}`
///
/// ### Event: `end` ###
/// `function( responseCode, response ){}`
///
function CommandRequest(){
}

// Inherit and export the CommandRequest class
m.util.inherits( CommandRequest, m.events.EventEmitter );
exports.CommandRequest = CommandRequest;

/// ### CommandRequest.start ###
/// Pure virtual method. This method must be implemented by the subclass.
CommandRequest.prototype.start = function(){
    throw {
        code    : RC.SERVER_ERROR,
        message : 'Command has no start method.'
    };
};


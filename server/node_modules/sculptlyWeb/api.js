///
/// # API #
/// API module handles all browser requests for API commands.
///

var m = {
    stream : require('stream'),
    util   : require('util')
};

/// ## Exported Variables ##
///
/// ### api.RC ###
/// Response codes come in the following flavors loosely based on HTTP codes:
///  - 200 `SUCCESS`         The request was executed successfully.
///  - 400 `UNKNOWN_COMMAND` The requested command is unknown.
///  - 401 `MISSING_PARAM`   The request was missing a required parameter.
///  - 500 `SERVER_ERROR`    The server screwed something up.
var RC = {
    // Success codes
    SUCCESS         : 200,

    // Client error codes
    UNKNOWN_COMMAND : 400,
    MISSING_PARAM   : 401,

    // Server error codes
    SERVER_ERROR    : 500
};
exports.RC = RC;

/// ## Exported Functions ##
///
/// ### api.createCommand ###
/// Creates a new `CommandRequest` object with the given parameters and returns
/// it.
exports.createCommand = function( command, parameters ){
    try{
        // Sanitize the command name then load it and create it
        var cleanCommand = command.replace( /[^\w]/g, '' ).toLowerCase();
        return new (require( './commands/' + cleanCommand ))( parameters );
    }
    catch( e ){
        // Uh-oh, failed to start the command!
        console.log( 'Failed to load "'+command+'": '+e.toString() );
        throw {
            code    : RC.UNKNOWN_COMMAND,
            message : 'Unknown command: ' + command
        };
    }
};

/// ## api.CommandRequest ##
/// Encapsulates an API request and is a `Readable Stream`.
///
/// ### Event: `error` ###
/// `function( errorCode, message ){}`
///
/// ### Event: `data` ###
/// `function( chunk ){}`
///
/// ### Event: `end` ###
/// `function( responseCode, response ){}`
///
function CommandRequest( name, params ){
    // Call parent constructor
    m.stream.Stream.call(this);

    // Set up additional member variables
    this.readable   = true;
    this._cmdName   = name;
    this._cmdParams = params;
}

// Inherit and export the CommandRequest class
m.util.inherits( CommandRequest, m.stream.Stream );
exports.CommandRequest = CommandRequest;

/// ### CommandRequest.inherits ###
/// Wrapper function for `util.inherits( <base>, CommandRequest );`.
///
/// @param {Function} base The base class that should inherit from CommandRequest.
CommandRequest.inherit = function( base ){
    m.util.inherits( base, CommandRequest );
};

/// ### command.start ###
/// Pure virtual method. This method must be implemented by the subclass.
CommandRequest.prototype.start = function(){
    this.error( RC.SERVER_ERROR, this._cmdName+' missing "start" method' );
};

/// ### command.error ###
/// @protected
///
/// Helper method for throwing an error with a code and message.
///
/// @throws `Error` on every call.
///
/// @param {RC}     code    The response code for this error.
/// @param {String} message Human readable message about the error.
CommandRequest.prototype.error = function( code, message ){
    var err     = new Error( '('+code+') '+message );
    err.code    = code;
    err.message = message;
    throw err;
};

/// ### command.requireParam ###
/// @protected
///
/// Helper method for ensuring a given parameter exists.
///
/// @throws `Error` if a parameter named `name` wasn't provided.
///
/// @param {String} name The name of the missing parameter.
///
/// @return {String} The value of the named parameter.
CommandRequest.prototype.requireParam = function( name ){
    var undefined;
    var param = this._cmdParams[ name ];
    if( param === undefined || param === null )
        this.error( RC.MISSING_PARAM, 'Required parameter "'+name+'" missing.' );
    return param;
};



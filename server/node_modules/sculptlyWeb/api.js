///
/// # API #
/// API module handles all browser requests for API commands.
///

var m = {
    stream : require('stream'),
    util   : require('util')
};

/// ## Exported Variables ##
///
/// ### api.RC ###
/// Response codes come in the following flavors loosely based on HTTP codes:
///  - 200 `SUCCESS`         The request was executed successfully.
///  - 400 `UNKNOWN_COMMAND` The requested command is unknown.
///  - 401 `MISSING_PARAM`   The request was missing a required parameter.
///  - 402 `INVALID_PARAM`   One or more parameters were invalid.
///  - 500 `SERVER_ERROR`    The server screwed something up.
var RC = {
    // Success codes
    SUCCESS         : 200,

    // Client error codes
    UNKNOWN_COMMAND : 400,
    MISSING_PARAM   : 401,
    INVALID_PARAM   : 402,

    // Server error codes
    SERVER_ERROR    : 500
};
exports.RC = RC;

/// ## Exported Functions ##
///
/// ### api.createCommand ###
/// Creates a new `CommandRequest` object with the given parameters and returns
/// it.
exports.createCommand = function( command, parameters ){
    try{
        // Sanitize the command name then load it and create it
        var cleanCommand = sanitize( command );
        return new (require( './commands/' + cleanCommand ))( parameters );
    }
    catch( e ){
        // Uh-oh, failed to start the command!
        console.log( 'Failed to load "'+command+'": '+e.toString() );
        throw {
            code    : RC.UNKNOWN_COMMAND,
            message : 'Unknown command: ' + command
        };
    }
};

/// ### api.sanitize ###
/// Sanitizes a string by removing all non-word characters and lowercasing it.
///
/// @param {String} str The string to sanitize.
///
/// @return {String} The sanitized string.
exports.sanitize = function sanitize( str ){
    return String(str).replace( /[^\w]/g, '' ).toLowerCase();
};

/// ### api.fileExists ###
/// Checks if the provided files exist.
///
/// #### callback ####
/// function( allExist, existArray ){}
///
/// The first parameter is `true` if and only if all of the files exist. The
/// second parameter is an Object with the filenames as keys and their existence
/// as values.
///
/// @param {Array}    files    An array of file paths to check for existence.
/// @param {Function} callback A function to call after all the files have been
///                            checked for existence.
exports.fileExists = function( files, callback ){
    // Set up our variables
    if( !(files instanceof Array) )
        files = [ files ];
    var existence  = {};
    var checkCount = 0;
    var allExist   = true;
    var len = files.length;

    // Now check if they exist
    files.forEach( function( filePath ){
        m.path.exists( filePath, function( exists ){
            // Store these results
            allExist = allExist && exists;
            existence[ filePath ] = exists;

            // Was this the last file? Call back!
            if( ++checkCount == len )
                callback( allExist, existence );
        });
    });
}

/// ## api.CommandRequest ##
/// Encapsulates an API request and is a `Readable Stream`.
///
/// ### Event: `error` ###
/// `function( errorCode, message ){}`
///
/// ### Event: `data` ###
/// `function( chunk ){}`
///
/// ### Event: `end` ###
/// `function( responseCode, response ){}`
///
function CommandRequest( name, params ){
    // Call parent constructor
    m.stream.Stream.call(this);

    // Set up additional member variables
    this.readable   = true;
    this._cmdName   = name;
    this._cmdParams = params;
}

// Inherit and export the CommandRequest class
m.util.inherits( CommandRequest, m.stream.Stream );
exports.CommandRequest = CommandRequest;

/// ### CommandRequest.inherits ###
/// Wrapper function for `util.inherits( <base>, CommandRequest );`.
///
/// @param {Function} base The base class that should inherit from CommandRequest.
CommandRequest.inherit = function( base ){
    m.util.inherits( base, CommandRequest );
};

/// ### command.start ###
/// Pure virtual method. This method must be implemented by the subclass.
CommandRequest.prototype.start = function(){
    this.error( RC.SERVER_ERROR, this._cmdName+' missing "start" method' );
};

/// ### command.error ###
/// @protected
///
/// Helper method for throwing an error with a code and message.
///
/// @param {RC}     code    The response code for this error.
/// @param {String} message Human readable message about the error.
///
/// @return {Error} The error exception to throw or emit.
CommandRequest.prototype.error = function( code, message ){
    var err     = new Error( '('+code+') '+message );
    err.code    = code;
    err.message = message;
    return err;
};

/// ### command.requireParam ###
/// @protected
///
/// Helper method for ensuring a given parameter exists.
///
/// @throws `Error` if a parameter named `name` wasn't provided.
///
/// @param {String} name The name of the parameter.
///
/// @return {String} The value of the named parameter.
CommandRequest.prototype.requireParam = function( name ){
    var param = this._cmdParams[ name ];
    if( param === undefined || param === null )
        throw this.error( RC.MISSING_PARAM, 'Required parameter "'+name+'" missing.' );
    return param;
};

/// ### command.requireNumber ###
/// @protected
///
/// Helper method for ensuring a given parameter exists and is a number.
///
/// @throws `Error` if `name` parameter doesn't exist or is not a number.
///
/// @param {String} name The name of the parameter.
///
/// @return {Number} The value of the named parameter parsed as a float.
CommandRequest.prototype.requireNumber = function( name ){
    var paramStr = this.requireParam( name );
    var paramNum = parseFloat( paramStr );
    if( isNaN( paramNum ) )
        throw this.error( RC.INVALID_PARAM, '"'+name+'" is not a number: "'+paramStr+'"' );
    return paramNum;
};

/// ### command.requireInt ###
/// @protected
///
/// Helper method for ensuring a given parameter exists and is an integer.
///
/// @throws `Error` if `name` parameter doesn't exist or is not an integer.
///
/// @param {String} name  The name of the parameter.
/// @param {Number} radix The radix to use. Defaults to 10.
///
/// @return {Number} The value of the name parameter parsed as an int.
CommandRequest.prototype.requireInt = function( name, radix ){
    var paramStr = this.requireParam( name );
    var paramNum = parseInt( paramStr, radix || 10 );
    if( isNaN( paramNum ) )
        throw this.error( RC.INVALID_PARAM, '"'+name+'" is not an integer: "'+paramStr+'"' );
    return paramNum;
};



var editor = {};
$(function(){

    var _3 = THREE;
    var mouseProjector = new _3.Projector();
    var activeObject = null;
    var activeMaterial = new _3.MeshBasicMaterial({
            color     : 0xFFFFFF,
            wireframe : true,
            shading   : _3.NoShading
        });

    var viewport = $('div.viewport');
    var width = viewport.width();
    var height = viewport.height();

    var renderer = new _3.WebGLRenderer({ clearColor : 0x4d4d59 });
    var camera = new _3.Camera( 45, width/height, 0.01, 10000 );
    var scene = new _3.Scene();
    editor.scene = scene;

    camera.translateXYZ( 0, 50, 300, true );
    camera.lookAt( new _3.Vector3( 0, 0, 0 ) );
    renderer.setSize( width, height );

    viewport.append( renderer.domElement );
    
    var sphereMat = new _3.MeshLambertMaterial({ color : 0xCC0000 });
    var sphere = new _3.Mesh( new _3.CubeGeometry( 50, 50, 50 ), sphereMat );
    scene.addChild( sphere );

    var pointLight = new _3.PointLight( 0xFFFFFF );
    pointLight.translateXYZ( 10, 50, 130, true );
    scene.addLight( pointLight );

    // Add the grid
    var gridMat = new _3.LineBasicMaterial({ color : 0xFFFFFF });
    var grid = new _3.Mesh( new _3.PlaneGeometry( 200, 200, 50, 50 ), gridMat );
    grid.rotateX( Math.PI / 2 );
    scene.addChild( grid );

    // Add mouse picking
    $('#editor .viewport').delegate( 'canvas', 'click', function(e){
        // Set up our required variables
        e.preventDefault();
        var canvas = $(this);
        var width  = canvas.width();
        var height = canvas.height();
        var mouseX = e.offsetX;
        var mouseY = e.offsetY;
        var mouse2dPos = new _3.Vector3(
                (mouseX / width) * 2 - 1,
               -(mouseY / height) * 2 + 1, // invert Y coord
                1
            );

        // Project the mouse position into 3d space and cast the ray
        var mouse3dPos = mouseProjector.unprojectVector( mouse2dPos, camera );
        var ray = new _3.Ray(
                mouse3dPos,
                mouse3dPos.clone().subSelf( camera.position ).normalize()
            );

        // Find the intersection and take the closest one
        var intersectedObjects = ray.intersectScene( scene );
        var closest = null;
        intersectedObjects.forEach( function( obj ){
            if( !closest || obj.distance < closest.distance )
                closest = obj;
        });

        // Do we currently have an active object? Clear its selected state
        if( activeObject )
            activeObject.materials.unshift()

        // If we picked an object, set it as active.
        if( closest ){
            activeObject = closest.object;
            activeObject.materials.shift( activeMaterial );
        }
        else
            activeObject = null;
    });

    // Start rendering.
    function render(){
        requestAnimFrame( render );

        sphere.rotateX( 0.01 );
        sphere.rotateY( 0.005 );
        sphere.translateY( Math.sin( sphere.rotation.x ) * 0.5, true );

        renderer.render( scene, camera );
    }
    render();

}); // end editor on ready



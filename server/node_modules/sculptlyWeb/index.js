///
/// The web module handles all requests from a browser for Sculptly.
///
/// Exported Functions
///   - `start` Turns on the web server.
///

// Load required modules
var m = {
    // Node modules
    http : require('http'),
    url  : require('url'),
    path : require('path'),
    fs   : require('fs'),

    // Sculptly modules
    api  : require('./api')
};

// Set up our globals
var port = process.env.C9_PORT;
var host = '0.0.0.0';
var apiServer = null;

// --- Exported Functions --- //

exports.start = function(){
    console.log( '*** Starting Server ***' );

    apiServer = m.http.createServer();
    apiServer.listen( port, host );
    apiServer.on( 'request', onRequest );
    apiServer.on( 'connection', onConnection );
    apiServer.on( 'close', onClose );
    apiServer.on( 'upgrade', onUpgrade );

    console.log( '*** Server Started ***' );
};

// --- Internal Functions --- //

function onRequest( req, res ){
    // Is this request for the api or for us?
    var filename = m.url.parse( req.url ).pathname;
    if( filename.match( /^\/api$/ ) )
        m.api.emit( 'request', req, res );
    else
        handlePageRequest( filename, req, res );
}

function handlePageRequest( filename, req, res )
{
    if( !filename.length || filename == '/' )
        filename = 'index.html';
    var fullPath = m.path.join( __dirname, 'client', filename );
    m.path.exists( fullPath, function( exists ){
        if( !exists )
            respond404( res );
        else
            respondHTML( res, fullPath );
    });
}

function respond404( res ){
    res.writeHead( 404, { 'Content-Type' : 'text/plain' } );
    res.end( 'File not found' );
}

function respondHTML( res, filePath ){
    // Get the content type
    var contentType = 'text/html';
    if( filePath.match( /\.js$/ ) )
        contentType = 'application/javascript';
    else if( filePath.match( /\.css$/ ) )
        contentType = 'text/css';

    // Write our header and pipe the file through
    res.writeHead( 200, { 'Content-Type' : contentType } );
    var stream = m.fs.createReadStream( filePath, { encoding : 'utf8' } );
    stream.pipe( res );
}

function onConnection( stream ){
    console.log( 'Connection opened' );
}

function onClose( stream ){
    console.log( 'Connection closed' );
}

function onUpgrade( request, socket, head ){
    console.log( 'Connection upgraded' );
}

///
/// # Web #
/// The web module handles all requests from a browser for Sculptly.
///
/// ### Exported Functions ###
///   - `start` Turns on the web server.
///
/// ### Exported Values ###
///   - `VERSION` An object containing a `MAJOR`, `MINOR`, and `VERSION` value.
///

// Load required modules
var m = {
    // Node modules
    http : require('http'),
    url  : require('url'),
    path : require('path'),
    fs   : require('fs'),
    qs   : require('querystring'),

    // Sculptly modules
    api  : require('./api')
};

// Set up our globals
var port = process.env.C9_PORT;
var host = '0.0.0.0';
var webServer = null;
var VERSION = {
    MAJOR : 0,
    MINOR : 1
};
VERSION.VERSION = VERSION.MAJOR+'.'+VERSION.MINOR;
var SERVER = {
    NAME : 'Sculptly Web Server v' + VERSION.VERSION
};
var HC = {
    BAD_REQUEST  : 400,
    NOT_FOUND    : 404,

    SERVER_ERROR : 500
};

// --- Exported Functions --- //

exports.start = function(){
    console.log( '*** Starting Server ***' );

    webServer = m.http.createServer();
    webServer.listen( port, host );
    webServer.on( 'request', onRequest );

    console.log( '*** Server Started ***' );
};

/// ## Exported Variables ##
///
exports.VERSION = VERSION;

/// ## Internal Functions ##
///
/// ### onRequest ###
/// Handles the HTTP request event.
///
/// This decides if the request needs to be handled directly by this module (such
/// as file requests) or passed off to a different module to handle (such as API
/// calls).
///
/// @param {ServerRequest}  req The request.
/// @param {ServerResponse} res Object to write the response to.
function onRequest( req, res ){
    // Is this request for the api or for us?
    var filename = m.url.parse( req.url ).pathname;
    console.log( 'Got request for "'+filename+'"' );
    if( filename == '/api' )
        handleAPIRequest( req, res );
    else{
        // Clean up the requested filename and resolve it before fetching it.
        filename = filename.replace( /\.\./g, '' );
        var fullPath = m.path.join( __dirname, 'client', filename );
        handlePageRequest( res, fullPath );
    }
}

/// ### handleAPIRequest ###
/// Handles requests to the API by parsing the parameters and starting the API
/// request.
///
/// @param {ServerRequest}  req The request.
/// @param {ServerResponse} res Object to write the response to.
function handleAPIRequest( req, res ){
    // Parse the request GET/POST parameters depending on method.
    if( req.method == 'GET' ){
        // Parse the URL and make the request
        var urlParts = m.url.parse( req.url, true );
        makeAPIRequest( res, urlParts.query );
    }
    else if( req.method == 'POST' ){
        // Fetch the POST body then parse it and make the request.
        var body = '';
        req.setEncoding( 'utf8' );
        req.on( 'data', function( chunk ){ body += chunk } );
        req.on( 'end', function(){
            makeAPIRequest( res, m.qs.parse( body ) );
        });
    }
    else
        respondError( res, HC.BAD_REQUEST, 'Unsupported method: "'+req.method+'"' );
}

/// ### handlePageRequest ###
/// Handles a file request.
///
/// Requests for JS, CSS, and HTML files all pass through this function.
///
/// @param {ServerResponse} res      The response object to send the file
///                         contents through.
/// @param {String}         filePath The path to the file to retrieve.
function handlePageRequest( res, filePath ){
    // Check if the file exists and respond appropriately.
    m.path.exists( filePath, function( exists ){
        if( !exists )
            respond404( res );
        else
            respondFile( res, filePath );
    });
}

/// ### makeAPIRequest ###
/// Creates and starts a new API command.
///
/// @param {ServerResponse} res    The response object to send the API response to.
/// @param {Object}         params The parameters parsed from the request.
function makeAPIRequest( res, params ){
    function apiError( code, message ){
        var response = {
            code    : code,
            message : message
        };
        respondJSON( res, response );
    }

    try{
        var data = '';
        var command = params.command;
        delete params.command;
        var cmdObj = m.api.createCommand( command, params );
        cmdObj.on( 'data',  function( chunk ){ data += chunk; } );
        cmdObj.on( 'end',   function(){ respondJSON( res, data ); } );
        cmdObj.on( 'error', function( e ){ apiError( e.code, e.message ); } );
        cmdObj.start();
    }
    catch( e ){
        apiError( e.code, e.message );
    }
}

/// ### respondError ###
/// Handles all error responses
///
/// @param {ServerResponse} res     The response object to send the error to.
/// @param {HC}             code    The error code to respond with
/// @param {String}         message Message to send as plain text.
function respondError( res, code, message ){
    res.writeHead( code, {
        'Server'       : SERVER.NAME,
        'Content-Type' : 'text/plain'
    });
    res.end( message );
}

/// ### respond404 ###
/// Responds with a 404, page-not-found.
///
/// @param {ServerResponse} res The response object to send a 404 to.
function respond404( res ){
    respondError( res, HC.NOT_FOUND, 'File not found' );
}

/// ### respond500 ###
/// Responds with a 500, server-error.
///
/// @param {ServerResponse} res The response object to send a 500 to.
/// @param {Error}          err The error that occurred. This will be toString'ed
///                         and logged.
function respond500( res, err ){
    console.log( '[alrt] Server error: '+(err ? err.toString : '') );
    respondError( res, HC.SERVER_ERROR, 'Server Error' );
}

/// ### respondFile ###
/// Responds with a specific file's contents.
///
/// @param {ServerResponse} res      The response object to send the file
///                         contents through.
/// @param {String}         filePath The name of the file to retrieve.
function respondFile( res, filePath ){
    // First stat the file to get its size
    m.fs.stat( filePath, function(err, stat){
        // Could we stat the file?
        if( err )
            respond500( res, err );

        // Was the request for a directory? Lets get its index.html instead.
        else if( stat.isDirectory() )
            handlePageRequest( res, m.path.join( filePath, 'index.html' ) );

        // We have a real file and successfully stat'd it.
        else{
            // Get the content type
            var contentType = 'text/html';
            if( filePath.match( /\.js$/ ) )
                contentType = 'application/javascript';
            else if( filePath.match( /\.css$/ ) )
                contentType = 'text/css';

            // Finally, write the header and pipe through the response.
            res.writeHead( 200, {
                'Server'         : SERVER.NAME,
                'Content-Type'   : contentType + '; charset=utf-8',
                'Content-Length' : stat.size
            });
            m.fs.createReadStream( filePath, { encoding : 'utf8' } ).pipe( res );
        }
    });
}

/// ### respondJSON ###
/// Responds with the given object, JSON encoded.
///
/// If `obj` is already a string no encoding will be performed, otherwise the
/// object will be JSON.stringify'd.
///
/// @param {ServerResponse} res The response object to send the JSON data to.
/// @param {mixed}          obj The object to respond with.
function respondJSON( res, obj ){
    // Encode the object if it is not already encoded.
    if( !(obj instanceof String) )
        obj = JSON.stringify( obj );

    // Write the header and send the data.
    res.writeHead( 200, {
        'Server'         : SERVER.NAME,
        'Content-Type'   : 'application/json; charset=utf-8',
        'Content-Length' : Buffer.byteLength( obj )
    });
    res.end( obj );
}







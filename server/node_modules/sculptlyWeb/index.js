///
/// The web module handles all requests from a browser for Sculptly.
///
/// Exported Functions
///   - `start` Turns on the web server.
///

// Load required modules
var m = {
    // Node modules
    http : require('http'),
    url  : require('url'),
    path : require('path'),
    fs   : require('fs'),

    // Sculptly modules
    api  : require('./api')
};

// Set up our globals
var port = process.env.C9_PORT;
var host = '0.0.0.0';
var webServer = null;
var VERSION = {
    MAJOR : 0,
    MINOR : 1
};
VERSION.VERSION = VERSION.MAJOR+'.'+VERSION.MINOR;

// --- Exported Functions --- //

exports.start = function(){
    console.log( '*** Starting Server ***' );

    webServer = m.http.createServer();
    webServer.listen( port, host );
    webServer.on( 'request', onRequest );

    console.log( '*** Server Started ***' );
};

// --- Exported Variables --- //

exports.VERSION = VERSION;

// --- Internal Functions --- //

/// Handles the HTTP request event.
///
/// This decides if the request needs to be handled directly by this module (such
/// as file requests) or passed off to a different module to handle (such as API
/// calls).
///
/// @param {ServerRequest}  req The request.
/// @param {ServerResponse} res Object to write the response to.
function onRequest( req, res ){
    // Is this request for the api or for us?
    var filename = m.url.parse( req.url ).pathname;
    if( filename == '/api' )
        m.api.emit( 'request', req, res );
    else{
        // Clean up the requested filename and resolve it before fetching it.
        filename = filename.replace( /\.\./g, '' );
        var fullPath = m.path.join( __dirname, 'client', filename );
        handlePageRequest( res, fullPath );
    }
}

/// Handles a file request.
///
/// Requests for JS, CSS, and HTML files all pass through this function.
///
/// @param {ServerResponse} res      The response object to send the file
///                         contents through.
/// @param {String}         filePath The path to the file to retrieve.
function handlePageRequest( res, filePath )
{
    // Clean up the given path and add our

    // Check if the file exists and respond appropriately.
    m.path.exists( filePath, function( exists ){
        if( !exists )
            respond404( res );
        else
            respondFile( res, filePath );
    });
}

/// Responds with a 404, page-not-found.
///
/// @param {ServerResponse} res The response object to send a 404 to.
function respond404( res ){
    res.writeHead( 404, { 'Content-Type' : 'text/plain' } );
    res.end( 'File not found' );
}

/// Responds with a specific file's contents.
///
/// @param {ServerResponse} res      The response object to send the file
///                         contents through.
/// @param {String}         filePath The name of the file to retrieve.
function respondFile( res, filePath ){
    // First stat the file to get its size
    m.fs.stat( filePath, function(err, stat){
        // Could we stat the file?
        if( err ){
            console.log( err.toString() );
            respond500( res );
        }

        // Was the request for a directory? Lets get its index.html instead.
        else if( stat.isDirectory() )
            handlePageRequest( res, m.path.join( filePath, 'index.html' ) );

        // We have a real file and successfully stat'd it.
        else{
            // Get the content type
            var contentType = 'text/html';
            if( filePath.match( /\.js$/ ) )
                contentType = 'application/javascript';
            else if( filePath.match( /\.css$/ ) )
                contentType = 'text/css';

            // Finally, write the header and pipe through the response.
            res.writeHead( 200, {
                'Server'         : 'Sculptly Web Server v' + VERSION.VERSION,
                'Content-Type'   : contentType + '; charset=utf-8',
                'Content-Length' : stat.size
            });
            m.fs.createReadStream( filePath, { encoding : 'utf8' } ).pipe( res );
        }
    });
}
